dis_instructions_w_class
,Class,Type,title,description
1,dis.Instruction,Bytecode operation ,opcode,"numeric code for operation, corresponding to the opcode values listed
below and the bytecode values in the Opcode collections."
2,dis.Instruction,Bytecode operation ,opname,human readable name for operation
3,dis.Instruction,Bytecode operation ,arg,"numeric argument to operation (if any), otherwise None"
4,dis.Instruction,Bytecode operation ,argval,"resolved arg value (if any), otherwise None"
5,dis.Instruction,Bytecode operation ,argrepr,"human readable description of operation argument (if any),
otherwise an empty string."
6,dis.Instruction,Bytecode operation ,offset,start index of operation within bytecode sequence
7,dis.Instruction,Bytecode operation ,starts_line,"line started by this opcode (if any), otherwise None"
8,dis.Instruction,,is_jump_target,"True if other code jumps to here, otherwise False"
11,dis.Positions,,lineno,None
12,dis.Positions,,end_lineno,None
13,dis.Positions,,col_offset,None
14,dis.Positions,,end_col_offset,None
15,,,NOP,"Do nothing code.  Used as a placeholder by the bytecode optimizer, and to
generate line tracing events."
16,,,POP_TOP,Removes the top-of-stack (TOS) item.
17,,,COPY,"Push the i-th item to the top of the stack. The item is not removed from its
original location."
18,,,SWAP,Swap TOS with the item at position i.
19,,,CACHE,"Rather than being an actual instruction, this opcode is used to mark extra
space for the interpreter to cache useful data directly in the bytecode
itself. It is automatically hidden by all dis utilities, but can be
viewed with show_caches=True."
20,, Unary operation,UNARY_POSITIVE,Implements TOS = +TOS.
21,, Unary operation,UNARY_NEGATIVE,Implements TOS = -TOS.
22,, Unary operation,UNARY_NOT,Implements TOS = not TOS.
23,, Unary operation,UNARY_INVERT,Implements TOS = ~TOS.
24,, Unary operation,GET_ITER,Implements TOS = iter(TOS).
25,, Unary operation,GET_YIELD_FROM_ITER,"If TOS is a generator iterator or coroutine object
it is left as is.  Otherwise, implements TOS = iter(TOS)."
26,,Binary and in-place operation,BINARY_OP,"Implements the binary and in-place operators (depending on the value of
op)."
27,,Binary and in-place operation,BINARY_SUBSCR,Implements TOS = TOS1[TOS].
28,,Binary and in-place operation,STORE_SUBSCR,Implements TOS1[TOS] = TOS2.
29,,Binary and in-place operation,DELETE_SUBSCR,Implements del TOS1[TOS].
30,,Coroutine opcodes,GET_AWAITABLE,"Implements TOS = get_awaitable(TOS), where get_awaitable(o)
returns o if o is a coroutine object or a generator object with
the CO_ITERABLE_COROUTINE flag, or resolves
o.__await__."
31,,Coroutine opcodes,GET_AITER,Implements TOS = TOS.__aiter__().
32,,Coroutine opcodes,GET_ANEXT,"Pushes get_awaitable(TOS.__anext__()) to the stack.  See
GET_AWAITABLE for details about get_awaitable."
33,,Coroutine opcodes,END_ASYNC_FOR,"Terminates an async for loop.  Handles an exception raised
when awaiting a next item.  If TOS is StopAsyncIteration pop 3
values from the stack and restore the exception state using the second
of them.  Otherwise re-raise the exception using the value
from the stack.  An exception handler block is removed from the block stack."
34,,Coroutine opcodes,BEFORE_ASYNC_WITH,"Resolves __aenter__ and __aexit__ from the object on top of the
stack.  Pushes __aexit__ and result of __aenter__() to the stack."
35,,Miscellaneous opcodes,PRINT_EXPR,"Implements the expression statement for the interactive mode.  TOS is removed
from the stack and printed.  In non-interactive mode, an expression statement
is terminated with POP_TOP."
36,,Miscellaneous opcodes,SET_ADD,"Calls set.add(TOS1[-i], TOS).  Used to implement set comprehensions."
37,,Miscellaneous opcodes,LIST_APPEND,"Calls list.append(TOS1[-i], TOS).  Used to implement list comprehensions."
38,,Miscellaneous opcodes,MAP_ADD,"Calls dict.__setitem__(TOS1[-i], TOS1, TOS).  Used to implement dict
comprehensions."
39,,Miscellaneous opcodes,RETURN_VALUE,Returns with TOS to the caller of the function.
40,,Miscellaneous opcodes,YIELD_VALUE,Pops TOS and yields it from a generator.
41,,Miscellaneous opcodes,SETUP_ANNOTATIONS,"Checks whether __annotations__ is defined in locals(), if not it is
set up to an empty dict. This opcode is only emitted if a class
or module body contains variable annotations
statically."
42,,Miscellaneous opcodes,IMPORT_STAR,"Loads all symbols not starting with '_' directly from the module TOS to
the local namespace. The module is popped after loading all names. This
opcode implements from module import *."
43,,Miscellaneous opcodes,POP_EXCEPT,"Pops a value from the stack, which is used to restore the exception state."
44,,Miscellaneous opcodes,RERAISE,"Re-raises the exception currently on top of the stack. If oparg is non-zero,
pops an additional value from the stack which is used to set f_lasti
of the current frame."
45,,Miscellaneous opcodes,PUSH_EXC_INFO,"Pops a value from the stack. Pushes the current exception to the top of the stack.
Pushes the value originally popped back to the stack.
Used in exception handlers."
46,,Miscellaneous opcodes,CHECK_EXC_MATCH,"Performs exception matching for except. Tests whether the TOS1 is an exception
matching TOS. Pops TOS and pushes the boolean result of the test."
47,,Miscellaneous opcodes,CHECK_EG_MATCH,"Performs exception matching for except*. Applies split(TOS) on
the exception group representing TOS1."
48,,Miscellaneous opcodes,PREP_RERAISE_STAR,"Combines the raised and reraised exceptions list from TOS, into an exception
group to propagate from a try-except* block. Uses the original exception
group from TOS1 to reconstruct the structure of reraised exceptions. Pops
two items from the stack and pushes the exception to reraise or None
if there isn’t one."
49,,Miscellaneous opcodes,WITH_EXCEPT_START,"Calls the function in position 4 on the stack with arguments (type, val, tb)
representing the exception at the top of the stack.
Used to implement the call context_manager.__exit__(*exc_info()) when an exception
has occurred in a with statement."
50,,Miscellaneous opcodes,LOAD_ASSERTION_ERROR,"Pushes AssertionError onto the stack.  Used by the assert
statement."
51,,Miscellaneous opcodes,LOAD_BUILD_CLASS,"Pushes builtins.__build_class__() onto the stack.  It is later called
to construct a class."
52,,Miscellaneous opcodes,BEFORE_WITH,"This opcode performs several operations before a with block starts.  First,
it loads __exit__() from the context manager and pushes it onto
the stack for later use by WITH_EXCEPT_START.  Then,
__enter__() is called. Finally, the result of calling the
__enter__() method is pushed onto the stack."
53,,Miscellaneous opcodes,GET_LEN,Push len(TOS) onto the stack.
54,,Miscellaneous opcodes,MATCH_MAPPING,"If TOS is an instance of collections.abc.Mapping (or, more technically: if
it has the Py_TPFLAGS_MAPPING flag set in its
tp_flags), push True onto the stack.  Otherwise, push
False."
55,,Miscellaneous opcodes,MATCH_SEQUENCE,"If TOS is an instance of collections.abc.Sequence and is not an instance
of str/bytes/bytearray (or, more technically: if it has
the Py_TPFLAGS_SEQUENCE flag set in its tp_flags),
push True onto the stack.  Otherwise, push False."
56,,Miscellaneous opcodes,MATCH_KEYS,"TOS is a tuple of mapping keys, and TOS1 is the match subject.  If TOS1
contains all of the keys in TOS, push a tuple containing the
corresponding values. Otherwise, push None."
57,,Miscellaneous opcodes,STORE_NAME,"Implements name = TOS. namei is the index of name in the attribute
co_names of the code object. The compiler tries to use
STORE_FAST or STORE_GLOBAL if possible."
58,,Miscellaneous opcodes,DELETE_NAME,"Implements del name, where namei is the index into co_names
attribute of the code object."
59,,Miscellaneous opcodes,UNPACK_SEQUENCE,"Unpacks TOS into count individual values, which are put onto the stack
right-to-left."
60,,Miscellaneous opcodes,UNPACK_EX,"Implements assignment with a starred target: Unpacks an iterable in TOS into
individual values, where the total number of values can be smaller than the
number of items in the iterable: one of the new values will be a list of all
leftover items."
61,,Miscellaneous opcodes,STORE_ATTR,"Implements TOS.name = TOS1, where namei is the index of name in
co_names."
62,,Miscellaneous opcodes,DELETE_ATTR,"Implements del TOS.name, using namei as index into co_names."
63,,Miscellaneous opcodes,STORE_GLOBAL,"Works as STORE_NAME, but stores the name as a global."
64,,Miscellaneous opcodes,DELETE_GLOBAL,"Works as DELETE_NAME, but deletes a global name."
65,,Miscellaneous opcodes,LOAD_CONST,Pushes co_consts[consti] onto the stack.
66,,Miscellaneous opcodes,LOAD_NAME,Pushes the value associated with co_names[namei] onto the stack.
67,,Miscellaneous opcodes,BUILD_TUPLE,"Creates a tuple consuming count items from the stack, and pushes the
resulting tuple onto the stack."
68,,Miscellaneous opcodes,BUILD_LIST,"Works as BUILD_TUPLE, but creates a list."
69,,Miscellaneous opcodes,BUILD_SET,"Works as BUILD_TUPLE, but creates a set."
70,,Miscellaneous opcodes,BUILD_MAP,"Pushes a new dictionary object onto the stack.  Pops 2 * count items
so that the dictionary holds count entries:
{..., TOS3: TOS2, TOS1: TOS}."
71,,Miscellaneous opcodes,BUILD_CONST_KEY_MAP,"The version of BUILD_MAP specialized for constant keys. Pops the
top element on the stack which contains a tuple of keys, then starting from
TOS1, pops count values to form values in the built dictionary."
72,,Miscellaneous opcodes,BUILD_STRING,"Concatenates count strings from the stack and pushes the resulting string
onto the stack."
73,,Miscellaneous opcodes,LIST_TO_TUPLE,Pops a list from the stack and pushes a tuple containing the same values.
74,,Miscellaneous opcodes,LIST_EXTEND,"Calls list.extend(TOS1[-i], TOS).  Used to build lists."
75,,Miscellaneous opcodes,SET_UPDATE,"Calls set.update(TOS1[-i], TOS).  Used to build sets."
76,,Miscellaneous opcodes,DICT_UPDATE,"Calls dict.update(TOS1[-i], TOS).  Used to build dicts."
77,,Miscellaneous opcodes,DICT_MERGE,Like DICT_UPDATE but raises an exception for duplicate keys.
78,,Miscellaneous opcodes,LOAD_ATTR,"Replaces TOS with getattr(TOS, co_names[namei])."
79,,Miscellaneous opcodes,COMPARE_OP,"Performs a Boolean operation.  The operation name can be found in
cmp_op[opname]."
80,,Miscellaneous opcodes,IS_OP,"Performs is comparison, or is not if invert is 1."
81,,Miscellaneous opcodes,CONTAINS_OP,"Performs in comparison, or not in if invert is 1."
82,,Miscellaneous opcodes,IMPORT_NAME,"Imports the module co_names[namei].  TOS and TOS1 are popped and provide
the fromlist and level arguments of __import__().  The module
object is pushed onto the stack.  The current namespace is not affected: for
a proper import statement, a subsequent STORE_FAST instruction
modifies the namespace."
83,,Miscellaneous opcodes,IMPORT_FROM,"Loads the attribute co_names[namei] from the module found in TOS. The
resulting object is pushed onto the stack, to be subsequently stored by a
STORE_FAST instruction."
84,,Miscellaneous opcodes,JUMP_FORWARD,Increments bytecode counter by delta.
85,,Miscellaneous opcodes,JUMP_BACKWARD,Decrements bytecode counter by delta. Checks for interrupts.
86,,Miscellaneous opcodes,JUMP_BACKWARD_NO_INTERRUPT,Decrements bytecode counter by delta. Does not check for interrupts.
87,,Miscellaneous opcodes,POP_JUMP_FORWARD_IF_TRUE,"If TOS is true, increments the bytecode counter by delta.  TOS is popped."
88,,Miscellaneous opcodes,POP_JUMP_BACKWARD_IF_TRUE,"If TOS is true, decrements the bytecode counter by delta.  TOS is popped."
89,,Miscellaneous opcodes,POP_JUMP_FORWARD_IF_FALSE,"If TOS is false, increments the bytecode counter by delta.  TOS is popped."
90,,Miscellaneous opcodes,POP_JUMP_BACKWARD_IF_FALSE,"If TOS is false, decrements the bytecode counter by delta.  TOS is popped."
91,,Miscellaneous opcodes,POP_JUMP_FORWARD_IF_NOT_NONE,"If TOS is not None, increments the bytecode counter by delta.  TOS is popped."
92,,Miscellaneous opcodes,POP_JUMP_BACKWARD_IF_NOT_NONE,"If TOS is not None, decrements the bytecode counter by delta.  TOS is popped."
93,,Miscellaneous opcodes,POP_JUMP_FORWARD_IF_NONE,"If TOS is None, increments the bytecode counter by delta.  TOS is popped."
94,,Miscellaneous opcodes,POP_JUMP_BACKWARD_IF_NONE,"If TOS is None, decrements the bytecode counter by delta.  TOS is popped."
95,,Miscellaneous opcodes,JUMP_IF_TRUE_OR_POP,"If TOS is true, increments the bytecode counter by delta and leaves TOS on the
stack.  Otherwise (TOS is false), TOS is popped."
96,,Miscellaneous opcodes,JUMP_IF_FALSE_OR_POP,"If TOS is false, increments the bytecode counter by delta and leaves TOS on the
stack.  Otherwise (TOS is true), TOS is popped."
97,,Miscellaneous opcodes,FOR_ITER,"TOS is an iterator.  Call its __next__() method.  If
this yields a new value, push it on the stack (leaving the iterator below
it).  If the iterator indicates it is exhausted, TOS is popped, and the byte
code counter is incremented by delta."
98,,Miscellaneous opcodes,LOAD_GLOBAL,Loads the global named co_names[namei>>1] onto the stack.
99,,Miscellaneous opcodes,LOAD_FAST,Pushes a reference to the local co_varnames[var_num] onto the stack.
100,,Miscellaneous opcodes,STORE_FAST,Stores TOS into the local co_varnames[var_num].
101,,Miscellaneous opcodes,DELETE_FAST,Deletes local co_varnames[var_num].
102,,Miscellaneous opcodes,MAKE_CELL,"Creates a new cell in slot i.  If that slot is empty then
that value is stored into the new cell."
103,,Miscellaneous opcodes,LOAD_CLOSURE,"Pushes a reference to the cell contained in slot i of the “fast locals”
storage.  The name of the variable is co_fastlocalnames[i]."
104,,Miscellaneous opcodes,LOAD_DEREF,"Loads the cell contained in slot i of the “fast locals” storage.
Pushes a reference to the object the cell contains on the stack."
105,,Miscellaneous opcodes,LOAD_CLASSDEREF,"Much like LOAD_DEREF but first checks the locals dictionary before
consulting the cell.  This is used for loading free variables in class
bodies."
106,,Miscellaneous opcodes,STORE_DEREF,"Stores TOS into the cell contained in slot i of the “fast locals”
storage."
107,,Miscellaneous opcodes,DELETE_DEREF,"Empties the cell contained in slot i of the “fast locals” storage.
Used by the del statement."
108,,Miscellaneous opcodes,COPY_FREE_VARS,"Copies the n free variables from the closure into the frame.
Removes the need for special code on the caller’s side when calling
closures."
109,,Miscellaneous opcodes,RAISE_VARARGS,"Raises an exception using one of the 3 forms of the raise statement,
depending on the value of argc:"
110,,Miscellaneous opcodes,CALL,"Calls a callable object with the number of arguments specified by argc,
including the named arguments specified by the preceding
KW_NAMES, if any.
On the stack are (in ascending order), either:"
111,,Miscellaneous opcodes,CALL_FUNCTION_EX,"Calls a callable object with variable set of positional and keyword
arguments.  If the lowest bit of flags is set, the top of the stack
contains a mapping object containing additional keyword arguments.
Before the callable is called, the mapping object and iterable object
are each “unpacked” and their contents passed in as keyword and
positional arguments respectively.
CALL_FUNCTION_EX pops all arguments and the callable object off the stack,
calls the callable object with those arguments, and pushes the return value
returned by the callable object."
112,,Miscellaneous opcodes,LOAD_METHOD,"Loads a method named co_names[namei] from the TOS object. TOS is popped.
This bytecode distinguishes two cases: if TOS has a method with the correct
name, the bytecode pushes the unbound method and TOS. TOS will be used as
the first argument (self) by CALL when calling the
unbound method. Otherwise, NULL and the object return by the attribute
lookup are pushed."
113,,Miscellaneous opcodes,PRECALL,"Prefixes CALL. Logically this is a no op.
It exists to enable effective specialization of calls.
argc is the number of arguments as described in CALL."
114,,Miscellaneous opcodes,PUSH_NULL,"Pushes a NULL to the stack.
Used in the call sequence to match the NULL pushed by
LOAD_METHOD for non-method calls."
115,,Miscellaneous opcodes,KW_NAMES,"Prefixes PRECALL.
Stores a reference to co_consts[consti] into an internal variable
for use by CALL. co_consts[consti] must be a tuple of strings."
116,,Miscellaneous opcodes,MAKE_FUNCTION,"Pushes a new function object on the stack.  From bottom to top, the consumed
stack must consist of values if the argument carries a specified flag value"
117,,Miscellaneous opcodes,BUILD_SLICE,"Pushes a slice object on the stack.  argc must be 2 or 3.  If it is 2,
slice(TOS1, TOS) is pushed; if it is 3, slice(TOS2, TOS1, TOS) is
pushed. See the slice() built-in function for more information."
118,,Miscellaneous opcodes,EXTENDED_ARG,"Prefixes any opcode which has an argument too big to fit into the default one
byte. ext holds an additional byte which act as higher bits in the argument.
For each opcode, at most three prefixal EXTENDED_ARG are allowed, forming
an argument from two-byte to four-byte."
119,,Miscellaneous opcodes,FORMAT_VALUE,"Used for implementing formatted literal strings (f-strings).  Pops
an optional fmt_spec from the stack, then a required value.
flags is interpreted as follows:"
120,,Miscellaneous opcodes,MATCH_CLASS,"TOS is a tuple of keyword attribute names, TOS1 is the class being matched
against, and TOS2 is the match subject.  count is the number of positional
sub-patterns."
121,,Miscellaneous opcodes,RESUME,"A no-op. Performs internal tracing, debugging and optimization checks."
122,,Miscellaneous opcodes,RETURN_GENERATOR,"Create a generator, coroutine, or async generator from the current frame.
Clear the current frame and return the newly created generator."
123,,Miscellaneous opcodes,SEND,"Sends None to the sub-generator of this generator.
Used in yield from and await statements."
124,,Miscellaneous opcodes,ASYNC_GEN_WRAP,"Wraps the value on top of the stack in an async_generator_wrapped_value.
Used to yield in async generators."
125,,Miscellaneous opcodes,HAVE_ARGUMENT,"This is not really an opcode.  It identifies the dividing line between
opcodes which don’t use their argument and those that do
(< HAVE_ARGUMENT and >= HAVE_ARGUMENT, respectively)."